<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Howtos on Notad 官方文档 Docs</title>
    <link>http://127.0.0.1/howtos/</link>
    <description>Recent content in Howtos on Notad 官方文档 Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Released under the Apache2 license</copyright>
    
	<atom:link href="http://127.0.0.1/howtos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://127.0.0.1/howtos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://127.0.0.1/howtos/</guid>
      <description>HOWTOs 文档  如何基于 Notadd 构建 API 如何开发一个 Notadd 模块 如何开发一个 Notadd 插件 [如何开发一个 Notadd Administration 模块的前端插扩展(frontend.md) 如何用 Vue2 写出 web 单页应用  如何基于 Notadd 构建 API Notadd 底层实现了 passport 机制，有统一的授权管理，主要支持两种方式进行 API 授权，一个是 client，领一个是 passport，这个在其他文档中有做详细的说明。
这里主要说的是，如何基于 Notadd 进行 API 接口的开发。
业务逻辑 熟悉 Laravel 的同学都应该知道，Laravel 遵循这样的业务逻辑实现：
路由(route) -&amp;gt; 控制器(controller) -&amp;gt; 业务逻辑(model) -&amp;gt; 数据输出(view)  而 Notadd 的 API 业务逻辑实现同样遵循类似的流程：
路由(route) -&amp;gt; 控制器(controller) -&amp;gt; API 处理器(handler) -&amp;gt; 模型(model) -&amp;gt; 数据输出(json)  其中，主要的差异在于，API 处理器提供了对数据输出格式的输出，返回的数据格式统一为：</description>
    </item>
    
  </channel>
</rss>